{
	"info": {
		"_postman_id": "d556444b-255d-4d12-b77b-cb1e6aac14ea",
		"name": "API_test_without_using_data_set",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all facts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the api returns correct status code\", () => {\r",
							"    var isSuccess = eval(pm.environment.get(\"isResponseCodeEquals\"))(200);\r",
							"\r",
							"    if(isSuccess) {\r",
							"        var responseBody = pm.response.json();\r",
							"        pm.test(\"Verify the response body is an array\", () => {\r",
							"            pm.expect(responseBody).to.be.an('array');  \r",
							"        })\r",
							"\r",
							"        var arrayLength = responseBody.length;\r",
							"        if(arrayLength > 0) {\r",
							"            pm.test(\"Verify the response body has status property\", () => {\r",
							"                pm.expect(responseBody[0]).to.have.property('status'); \r",
							"            }\r",
							"        )}        \r",
							"    }\r",
							"    \r",
							"    pm.expect(isSuccess).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/facts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"facts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get fact details  - existing fact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the api returns correct status code\", () => {\r",
							"    var isSuccess = eval(pm.environment.get(\"isResponseCodeEquals\"))(200);\r",
							"\r",
							"    if(isSuccess) {\r",
							"        pm.test(\"Verify the response body has correct properties when fact id is found\", () => {\r",
							"            var responseBody = pm.response.json();\r",
							"            pm.expect(responseBody).to.have.property('status');\r",
							"            pm.expect(responseBody.status.verified).to.be.true;\r",
							"            pm.expect(responseBody).to.have.property('user');\r",
							"            pm.expect(responseBody).to.have.property('type').to.be.eql('cat') \r",
							"        }\r",
							"    )}     \r",
							"\r",
							"    pm.expect(isSuccess).to.be.true;   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/facts/58e008800aac31001185ed07",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"facts",
						"58e008800aac31001185ed07"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get fact details  - fact not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the api returns correct status code when fact does not exist\", () => {\r",
							"    var isSuccess = eval(pm.environment.get(\"isResponseCodeEquals\"))(404);\r",
							"\r",
							"    if(isSuccess) {\r",
							"        pm.test(\"Verify the response body returns correct messge when fact does not exist\", () => {\r",
							"            var responseBody = pm.response.json();\r",
							"            pm.expect(responseBody).to.have.property('message');\r",
							"            pm.expect(responseBody.message).to.equal('Fact not found') \r",
							"        }\r",
							"    )}  \r",
							"    pm.expect(isSuccess).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/facts/58e008ad0aac3100115ed0c1",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"facts",
						"58e008ad0aac3100115ed0c1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get fact details - invalid fact id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the api returns 400 bad request when fact id is invalid\", () => {\r",
							"    var isSuccess = eval(pm.environment.get(\"isResponseCodeEquals\"))(400);  \r",
							"    pm.expect(isSuccess).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/facts/58e008630aac31001185ed0156",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"facts",
						"58e008630aac31001185ed0156"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var isResponseCodeEquals = (expectedCode) => {",
					"    var isSuccess = false;",
					"    if (pm.response.code == expectedCode) {",
					"        isSuccess = true;",
					"    }",
					"    else {",
					"        console.log(pm.response.text());",
					"    }",
					"    return isSuccess;",
					"}",
					"pm.environment.set(\"isResponseCodeEquals\", isResponseCodeEquals.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://cat-fact.herokuapp.com",
			"type": "string"
		}
	]
}